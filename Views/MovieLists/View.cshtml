@model MVC.Models.MovieListViewModel

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@Model.ModelList.Name</h2>

<div>
    <hr />
    <div class="row">
        <div class="col-md-4">
            Movie info will go here
        </div>
        <div class="col-md-8">
            <p>
                @Html.ActionLink("Add Movies", "Add", "MovieLists", new { ID = @Model.ModelList.ID }, new { @class="btn btn-primary" })
            </p>
            <ol id="columns">
                @for (int i = 0; i < Model.Movies.Count(); ++i)
                {
                    int j = i + 1;
                    Movie movie = Model.Movies[i];
                    <li class="column li-item" draggable="true"><header>@j.        @movie.Title</header></li>
                }
            </ol>
        </div>
    </div>

</div>


<style>
    [draggable] {
        -moz-user-select: none;
        -khtml-user-select: none;
        -webkit-user-select: none;
        user-select: none;
        /* Required to make elements draggable in old WebKit */
        -khtml-user-drag: element;
        -webkit-user-drag: element;
    }

    #columns {
        list-style-type: none;
        padding:0;
    }

    .column {
        width: 100%;
        padding-bottom: 0.25em;
        padding-top: 0.25em;
        cursor: move;
    }

        .column header {
            text-align: left;
            font-weight: bold;
            font-size: 2rem;
            color: #3ba4ff;
            background-color: #222;
            padding-top: 0.5em;
            padding-bottom: 0.5em;
            padding-left: 2em;
            border-radius: 10px;
            border: 2px solid #222;
        }

        .column.dragElem {
            /*opacity: 0.4;*/
        }

        .column.over {
            border-top: 2px solid #3ba4ff;
        }
</style>

<script>
    var dragSrcEl = null;

    function handleDragStart(e) {
        // Target (this) element is the source node.
        dragSrcEl = this;

        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', this.outerHTML);

        this.classList.add('dragElem');
    }
    function handleDragOver(e) {
        if (e.preventDefault) {
            e.preventDefault(); // Necessary. Allows us to drop.
        }
        this.classList.add('over');

        e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.

        return false;
    }

    function handleDragEnter(e) {
        // this / e.target is the current hover target.
    }

    function handleDragLeave(e) {
        this.classList.remove('over');  // this / e.target is previous target element.
    }

    function handleDrop(e) {
        // this/e.target is current target element.

        if (e.stopPropagation) {
            e.stopPropagation(); // Stops some browsers from redirecting.
        }

        // Don't do anything if dropping the same column we're dragging.
        if (dragSrcEl != this) {
            // Set the source column's HTML to the HTML of the column we dropped on.
            //alert(this.outerHTML);
            //dragSrcEl.innerHTML = this.innerHTML;
            //this.innerHTML = e.dataTransfer.getData('text/html');
            this.parentNode.removeChild(dragSrcEl);
            var dropHTML = e.dataTransfer.getData('text/html');
            this.insertAdjacentHTML('beforebegin', dropHTML);
            var dropElem = this.previousSibling;
            addDnDHandlers(dropElem);
            console.log("Thats a drop");
            reOrder()
        }

        this.classList.remove('over');
        return false;
    }

    function handleDragEnd(e) {
        // this/e.target is the source node.
        this.classList.remove('over');

        /*[].forEach.call(cols, function (col) {
          col.classList.remove('over');
        });*/
    }

    function addDnDHandlers(elem) {
        elem.addEventListener('dragstart', handleDragStart, false);
        elem.addEventListener('dragenter', handleDragEnter, false)
        elem.addEventListener('dragover', handleDragOver, false);
        elem.addEventListener('dragleave', handleDragLeave, false);
        elem.addEventListener('drop', handleDrop, false);
        elem.addEventListener('dragend', handleDragEnd, false);

    }

    var cols = document.querySelectorAll('#columns .column');
    [].forEach.call(cols, addDnDHandlers);

    function reOrder() {
        var x = document.getElementsByTagName('header');
        for (i = 0; i < x.length; i++) {
            var text = x[i].innerText;
            var idxOfDot = text.indexOf('.');
            text = i + 1 + "." + text.substr(idxOfDot + 1);
            x[i].innerText = text;
        }
    }
</script>