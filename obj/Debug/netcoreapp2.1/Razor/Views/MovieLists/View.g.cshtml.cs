#pragma checksum "C:\Users\chris\Coding\Personal\ASP.NET\ReelRate\MVC\Views\MovieLists\View.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c39cb00222259e6fd52640c06a216895a64d4265"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_MovieLists_View), @"mvc.1.0.view", @"/Views/MovieLists/View.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/MovieLists/View.cshtml", typeof(AspNetCore.Views_MovieLists_View))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\chris\Coding\Personal\ASP.NET\ReelRate\MVC\Views\_ViewImports.cshtml"
using MVC;

#line default
#line hidden
#line 2 "C:\Users\chris\Coding\Personal\ASP.NET\ReelRate\MVC\Views\_ViewImports.cshtml"
using MVC.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c39cb00222259e6fd52640c06a216895a64d4265", @"/Views/MovieLists/View.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9aa69464cafd4d76600b45784b8a784724c641a3", @"/Views/_ViewImports.cshtml")]
    public class Views_MovieLists_View : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<MVC.Models.MovieListViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(38, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "C:\Users\chris\Coding\Personal\ASP.NET\ReelRate\MVC\Views\MovieLists\View.cshtml"
  
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(130, 6, true);
            WriteLiteral("\r\n<h2>");
            EndContext();
            BeginContext(137, 20, false);
#line 8 "C:\Users\chris\Coding\Personal\ASP.NET\ReelRate\MVC\Views\MovieLists\View.cshtml"
Write(Model.ModelList.Name);

#line default
#line hidden
            EndContext();
            BeginContext(157, 201, true);
            WriteLiteral("</h2>\r\n\r\n<div>\r\n    <hr />\r\n    <div class=\"row\">\r\n        <div class=\"col-md-4\">\r\n            Movie info will go here\r\n        </div>\r\n        <div class=\"col-md-8\">\r\n            <p>\r\n                ");
            EndContext();
            BeginContext(359, 118, false);
#line 18 "C:\Users\chris\Coding\Personal\ASP.NET\ReelRate\MVC\Views\MovieLists\View.cshtml"
           Write(Html.ActionLink("Add Movies", "Add", "MovieLists", new { ID = @Model.ModelList.ID }, new { @class="btn btn-primary" }));

#line default
#line hidden
            EndContext();
            BeginContext(477, 51, true);
            WriteLiteral("\r\n            </p>\r\n            <ol id=\"columns\">\r\n");
            EndContext();
#line 21 "C:\Users\chris\Coding\Personal\ASP.NET\ReelRate\MVC\Views\MovieLists\View.cshtml"
                 for (int i = 0; i < Model.Movies.Count(); ++i)
                {
                    int j = i + 1;
                    Movie movie = Model.Movies[i];

#line default
#line hidden
            BeginContext(700, 72, true);
            WriteLiteral("                    <li class=\"column li-item\" draggable=\"true\"><header>");
            EndContext();
            BeginContext(773, 1, false);
#line 25 "C:\Users\chris\Coding\Personal\ASP.NET\ReelRate\MVC\Views\MovieLists\View.cshtml"
                                                                   Write(j);

#line default
#line hidden
            EndContext();
            BeginContext(774, 9, true);
            WriteLiteral(".        ");
            EndContext();
            BeginContext(784, 11, false);
#line 25 "C:\Users\chris\Coding\Personal\ASP.NET\ReelRate\MVC\Views\MovieLists\View.cshtml"
                                                                              Write(movie.Title);

#line default
#line hidden
            EndContext();
            BeginContext(795, 16, true);
            WriteLiteral("</header></li>\r\n");
            EndContext();
#line 26 "C:\Users\chris\Coding\Personal\ASP.NET\ReelRate\MVC\Views\MovieLists\View.cshtml"
                }

#line default
#line hidden
            BeginContext(830, 4078, true);
            WriteLiteral(@"            </ol>
        </div>
    </div>

</div>


<style>
    [draggable] {
        -moz-user-select: none;
        -khtml-user-select: none;
        -webkit-user-select: none;
        user-select: none;
        /* Required to make elements draggable in old WebKit */
        -khtml-user-drag: element;
        -webkit-user-drag: element;
    }

    #columns {
        list-style-type: none;
        padding:0;
    }

    .column {
        width: 100%;
        padding-bottom: 0.25em;
        padding-top: 0.25em;
        cursor: move;
    }

        .column header {
            text-align: left;
            font-weight: bold;
            font-size: 2rem;
            color: #3ba4ff;
            background-color: #222;
            padding-top: 0.5em;
            padding-bottom: 0.5em;
            padding-left: 2em;
            border-radius: 10px;
            border: 2px solid #222;
        }

        .column.dragElem {
            /*opacity: 0.4;*/
        }

     ");
            WriteLiteral(@"   .column.over {
            border-top: 2px solid #3ba4ff;
        }
</style>

<script>
    var dragSrcEl = null;

    function handleDragStart(e) {
        // Target (this) element is the source node.
        dragSrcEl = this;

        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', this.outerHTML);

        this.classList.add('dragElem');
    }
    function handleDragOver(e) {
        if (e.preventDefault) {
            e.preventDefault(); // Necessary. Allows us to drop.
        }
        this.classList.add('over');

        e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.

        return false;
    }

    function handleDragEnter(e) {
        // this / e.target is the current hover target.
    }

    function handleDragLeave(e) {
        this.classList.remove('over');  // this / e.target is previous target element.
    }

    function handleDrop(e) {
        // this/e.target is current target eleme");
            WriteLiteral(@"nt.

        if (e.stopPropagation) {
            e.stopPropagation(); // Stops some browsers from redirecting.
        }

        // Don't do anything if dropping the same column we're dragging.
        if (dragSrcEl != this) {
            // Set the source column's HTML to the HTML of the column we dropped on.
            //alert(this.outerHTML);
            //dragSrcEl.innerHTML = this.innerHTML;
            //this.innerHTML = e.dataTransfer.getData('text/html');
            this.parentNode.removeChild(dragSrcEl);
            var dropHTML = e.dataTransfer.getData('text/html');
            this.insertAdjacentHTML('beforebegin', dropHTML);
            var dropElem = this.previousSibling;
            addDnDHandlers(dropElem);
            console.log(""Thats a drop"");
            reOrder()
        }

        this.classList.remove('over');
        return false;
    }

    function handleDragEnd(e) {
        // this/e.target is the source node.
        this.classList.remove('over');

");
            WriteLiteral(@"        /*[].forEach.call(cols, function (col) {
          col.classList.remove('over');
        });*/
    }

    function addDnDHandlers(elem) {
        elem.addEventListener('dragstart', handleDragStart, false);
        elem.addEventListener('dragenter', handleDragEnter, false)
        elem.addEventListener('dragover', handleDragOver, false);
        elem.addEventListener('dragleave', handleDragLeave, false);
        elem.addEventListener('drop', handleDrop, false);
        elem.addEventListener('dragend', handleDragEnd, false);

    }

    var cols = document.querySelectorAll('#columns .column');
    [].forEach.call(cols, addDnDHandlers);

    function reOrder() {
        var x = document.getElementsByTagName('header');
        for (i = 0; i < x.length; i++) {
            var text = x[i].innerText;
            var idxOfDot = text.indexOf('.');
            text = i + 1 + ""."" + text.substr(idxOfDot + 1);
            x[i].innerText = text;
        }
    }
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<MVC.Models.MovieListViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
